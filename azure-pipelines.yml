# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: AWS ECR
  - group: DOCKERFILE ENVS

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install awscli
  displayName: 'Install AWS CLI'
  
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
  displayName: 'npm install and build'
  
- script: |
    npm test -- --coverage
  displayName: 'Run Tests and Coverage'

- script: |
    aws configure set aws_access_key_id "$AWS_ECR_IAM_KEY"
    aws configure set aws_secret_access_key "$AWS_ECR_IAM_PASSWORD"
    aws configure set region "$AWS_ECR_REGION"
  displayName: 'Configure AWS CLI'

- task: AmazonWebServices.aws-vsts-tools.SystemsManagerGetParameter.SystemsManagerGetParameter@1
  displayName: 'Systems Manager Get Parameter: DB_HOST'
  inputs:
    awsCredentials: 'AWS'
    regionName: 'us-east-2'
    parameterName: 'DB_HOST'
    parameterVersion: 1
    singleNameTransform: custom
    customVariableName: 'DB_HOST'
    
- task: AmazonWebServices.aws-vsts-tools.SystemsManagerGetParameter.SystemsManagerGetParameter@1
  displayName: 'Systems Manager Get Parameter: DB_USERNAME'
  inputs:
    awsCredentials: 'AWS'
    regionName: 'us-east-2'
    parameterName: 'DB_USERNAME'
    parameterVersion: 1
    singleNameTransform: custom
    customVariableName: 'DB_USERNAME'
    
- task: AmazonWebServices.aws-vsts-tools.SystemsManagerGetParameter.SystemsManagerGetParameter@1
  displayName: 'Systems Manager Get Parameter: DB_PASSWORD'
  inputs:
    awsCredentials: 'AWS'
    regionName: 'us-east-2'
    parameterName: 'DB_PASSWORD'
    parameterVersion: 1
    singleNameTransform: custom
    customVariableName: 'DB_PASSWORD'

- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace tokens in Dockerfile'
  inputs:
    rootDirectory: .
    targetFiles: Dockerfile

- script: |
    cat Dockerfile
    aws ecr get-login-password --region "$AWS_ECR_REGION" | docker login --username AWS --password-stdin "$AWS_ECR_REGISTRY"
    docker build -t food-court-ms:latest .
    docker tag food-court-ms:latest "$AWS_ECR_REGISTRY"/food-court-ms:latest
    aws ecr get-login-password --region "$AWS_ECR_REGION" | docker login --username AWS --password-stdin "$AWS_ECR_REGISTRY"
    docker push "$AWS_ECR_REGISTRY"/food-court-ms:latest
    aws ecs update-service --cluster food-court-cluster --service food-court-s --force-new-deployment
  displayName: 'Build, Tag, and Push Docker Image to ECR'
